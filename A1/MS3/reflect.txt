/*/////////////////////////////////////////////////////////////////////////
                        Assignment 1 - Reflect
Full Name  : David Andres Sanchez Umbarila
Student ID#: 140273228
Email      : dasanchez-umbarila@myseneca.ca
Section    : NBB

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
/////////////////////////////////////////////////////////////////////////*/

1. To effectively display all Appointments in an organized manner, a sorting 
    function was essential. Three functions were designed for this purpose,
     which constitute distinct elements within the same algorithm, each in 
     the service of readability and structural clarity.
     
    int compareAppointment(const struct Appointment *app1, 
                           const struct Appointment *app2);
    The first function, "compareAppointment", operates in two appointments,
      evaluating their dates and times. If the initial value is less than 
      the subsequent value, the function returns 1; otherwise, it returns 0.
       In case of equality, the comparison extends to subsequent attributes
        such as year, month, day, hour, and minute.

    void swap(struct Appointment *appointment1, 
              struct Appointment *appointment2);    
    swap serves as a direct function, accepting pointers to appointment 
        structures and exchanging values stored in their respective memory 
        locations. This is facilitated by using a temporary memory location.

    void selectionSort(struct Appointment *appointments, 
                       int maxAppointments);    
    The central sorting function, "selectionSort", is central to the 
        algorithm. Rooted in the sorting by selection approach, it navigates
         through the appointment array. Their main responsibility is to 
         compare the elements of the array and then pass them on to the 
         comparison function for decision making. Together, these features
          streamline the process of organizing appointments for display. 
          
    Although it is an integral part of the same classification algorithm, 
        the separation into different functions improves both understanding
         and structural organization, which contributes to the overall 
         efficiency of the system.

2. The scanf and getChar functions where not used in the clinic.c module 
    because of the existence of the core.c module. This module was 
    specifically designed to handle the standard inputs of the user, having
    functions with specific input purposes like inputIntRange, inputCharRange,
    inputCharOptions, etc. Additionally all these functions were implemented
    to get rid of the \n error generated by char scanf functions and contents
    of the buffer, implementing clearInputBuffer to solve the issue. This type 
    of modules are useful cause it's allows the logic module to just focus
    on operations without worrying on input error handling.

3. Sorting functions have been placed within the utility functions section 
    because of their intended use as auxiliary tools for other main functions. 
    Although vital to the accurate completion of tasks, these sorting functions 
    are not presented as independent major requirements or features. For 
    example, functions such as nextPatientNumber and findPatientIndexByPatientNum 
    are essential to the correctness of task execution, but serve predominantly 
    as components or tools within the larger process. By categorizing them as 
    utility functions, their purpose aligns with assisting general functionalities 
    without assuming a central role.
